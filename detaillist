  const downloadFiles = async () => {
    //setIsLoading(true);
    try{
      showToastMessage("Preparing download...", "Please wait while we prepare your download.", loaderToastBottomCenter, 'info', true);
      const selectedItems: any = selection.getSelection();
      if (selectedItems.length === 1 && selectedItems[0].Type === "File") {
        await downloadFile(selectedItems[0]);
        selection.setAllSelected(false);
        setSelectedItems([]);
        hideToastMessage(loaderToastBottomCenter);
        return;
      }
      const zip = new JSZip();
      const downloadPromises = selectedItems.map(async (item: any) => {
        if (item.Type === "File") {
          const fileBlob = await sp.web.getFileByServerRelativeUrl(`${item.Url}`).getBlob();
          zip.file(item.name, fileBlob);
        } else {
          await addFolderToZip(zip, item.Url, item.name);
        }
      });
      await Promise.all(downloadPromises);
      const zipBlob = await zip.generateAsync({ type: "blob" });
      saveAs(zipBlob, "Documents.zip");
      //setIsLoading(false);
      showToastMessage("Downloaded successfully", "", toastBottomCenter, 'success');
      hideToastMessage(loaderToastBottomCenter);
      selection.setAllSelected(false);
      setSelectedItems([]);
    } catch (error) {
      console.error("Error downloading files:", error);
      setErrorMessage("Failed to download files.");
      hideToastMessage(loaderToastBottomCenter);
      showToastMessage("Failed to download files", "", toastBottomCenter, 'error');
    }
  };

  const downloadFile = async (file: any) => {
    try {
      const fileBlob = await sp.web.getFileByServerRelativeUrl(file.Url).getBlob();
      const link = document.createElement("a");
      link.href = URL.createObjectURL(fileBlob);
      link.download = file.name;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      setIsLoading(false);
    } catch (error) {
      console.error(`Failed to download ${file.name}:`, error);
      showToastMessage(`Failed to download ${file.name}`, "", toastBottomCenter, 'error');
    }
  }

  const addFolderToZip = async (zip: any, folderUrl: any, folderName: any) => {
    const folderNameUrl = folderUrl.includes(siteRelativeUrl) ? folderUrl : `${siteRelativeUrl}/${DOCUMENT_LIBRARY}/${folderUrl}`;
    const folder = sp.web.getFolderByServerRelativeUrl(`${folderNameUrl}`);
    const files = await folder.files();
    const subfolders = await folder.folders();

    const folderZip = zip.folder(folderName);
    const filePromises = files.map(async (file: any) => {
      const fileBlob = await sp.web.getFileByServerRelativeUrl(file.ServerRelativeUrl).getBlob();
      folderZip.file(file.Name, fileBlob);
    });
    const subfolderPromises = subfolders.map(async (subfolder: any) => {
      await addFolderToZip(folderZip, subfolder.ServerRelativeUrl, subfolder.Name);
    });

    await Promise.all([...filePromises, ...subfolderPromises]);
  };

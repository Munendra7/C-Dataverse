function main(workbook: ExcelScript.Workbook) {
  const sheet = workbook.getActiveWorksheet();
  const data = sheet.getUsedRange().getValues();

  // Result object
  const result: Record<string, any> = {};

  // Define Metadata fields to extract
  const metadataFields = [
    "Country",
    "Insurer",
    "Local Insurer Abbreviated Name",
    "Address",
    "Local Broker Required?",
    "Minimum Brokerage Percent",
    "Maximum Brokerage Percent",
    "Is a Local Reinsurer used?",
    "Local Reinsurer Name",
    "Local Reinsurer Address",
    "Local Reinsurer Commission Percent",
    "Local Reinsurer Retention Percent"
  ];

  // Extract metadata values based on label
  for (const label of metadataFields) {
    const value = findLabelValue(data, label);
    result[label] = value;
  }

  // Extract contact sections
  const contactSections = [
    "Primary Contact",
    "Underwriting Contact",
    "Premium Collection Contact",
    "Claims Contact"
  ];

  for (const section of contactSections) {
    const contactData = extractContactBlock(data, section);
    result[section] = contactData;
  }

  console.log(result);
  return result;
}

// ========== HELPERS ==========

function findLabelValue(data: (string | number | boolean)[][], label: string): string {
  for (let i = 0; i < data.length; i++) {
    if ((data[i][0] ?? '').toString().trim().toLowerCase() === label.toLowerCase()) {
      return (data[i][1] ?? '').toString().trim();
    }
  }
  return '';
}

type Contact = {
  name: string;
  company: string;
  email: string;
  phone: string;
};

function extractContactBlock(data: (string | number | boolean)[][], label: string): Contact[] {
  const contacts: Contact[] = [];
  let startRow = -1;

  // Find label
  for (let i = 0; i < data.length; i++) {
    if ((data[i][0] ?? '').toString().toLowerCase().includes(label.toLowerCase())) {
      startRow = i + 1;
      break;
    }
  }

  if (startRow === -1) return [];

  for (let i = startRow; i < data.length; i++) {
    const row = data[i];

    const firstCell = (row[0] ?? '').toString().toLowerCase();

    // Stop at a new contact section or empty row
    if (
      firstCell.includes("contact") &&
      !firstCell.includes(label.toLowerCase())
    ) break;

    if (row.every(cell => cell === null || cell.toString().trim() === '')) break;

    const name = (row[0] ?? '').toString().trim();
    const company = (row[1] ?? '').toString().trim();

    const emailParts = [(row[2] ?? ''), (row[3] ?? '')]
      .map(cell => cell.toString().trim())
      .filter(e => e.includes('@') || e.includes('.'));

    const email = emailParts.join('');
    const phone = (row[4] ?? row[5] ?? '').toString().trim();

    if (name || company || email || phone) {
      contacts.push({ name, company, email, phone });
    }
  }

  return contacts;
}

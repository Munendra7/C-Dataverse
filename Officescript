function main(workbook: ExcelScript.Workbook) {
  const sheet = workbook.getActiveWorksheet();
  const data = sheet.getUsedRange().getValues();

  // Define the sections we care about
  const contactSections = [
    "Primary Contact",
    "Underwriting Contact",
    "Premium Collection Contact",
    "Claims Contact"
  ];

  const results: any = {};

  // Loop through each section label
  for (const section of contactSections) {
    const sectionData = extractSectionData(data, section);
    results[section] = sectionData;
  }

  console.log(results);
  return results;
}

// Utility to extract section block dynamically
function extractSectionData(data: (string | number | boolean)[][], label: string) {
  const sectionRows: any[] = [];
  let startRow = -1;

  for (let i = 0; i < data.length; i++) {
    if ((data[i][0] ?? '').toString().toLowerCase().includes(label.toLowerCase())) {
      startRow = i + 1;
      break;
    }
  }

  if (startRow === -1) return [];

  for (let i = startRow; i < data.length; i++) {
    const row = data[i];
    
    // Stop when the next label starts (e.g., next section like Underwriting Contact)
    const firstCell = (row[0] ?? '').toString().toLowerCase();
    if (firstCell.includes("contact") && !firstCell.includes(label.toLowerCase())) {
      break;
    }

    // Stop at empty row
    if (row.every(cell => cell === null || cell.toString().trim() === '')) break;

    // Extract potential contact chunks from the row
    let contactChunks = splitRowIntoContacts(row);
    sectionRows.push(...contactChunks);
  }

  return sectionRows;
}

// Split a row into multiple contact chunks based on structure
function splitRowIntoContacts(row: (string | number | boolean)[]): any[] {
  const chunkSize = 4; // Assume contact details are grouped in 4 columns
  const contacts: any[] = [];

  for (let i = 0; i < row.length; i += chunkSize) {
    const name = (row[i] ?? '').toString().trim();
    const company = (row[i + 1] ?? '').toString().trim();
    const emailParts = [row[i + 2], row[i + 3]].map(cell => (cell ?? '').toString().trim());
    const email = emailParts.filter(e => e.includes('@') || e.includes('.')).join('');
    const phone = (row[i + 4] ?? '').toString().trim();

    if (name || company || email || phone) {
      contacts.push({ name, company, email, phone });
    }
  }

  return contacts;
}

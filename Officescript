function main(workbook: ExcelScript.Workbook) {
  const sheet = workbook.getActiveWorksheet();
  const data = sheet.getUsedRange().getValues();
  
  // Output structure
  const result: Record<string, string | Contact[]> = {};

  // === Metadata extraction ===
  const metadataLabels: string[] = [
    "Country",
    "Insurer",
    "Local Insurer Abbreviated Name",
    "Address",
    "Local Broker Required?",
    "Minimum Brokerage Percent",
    "Maximum Brokerage Percent",
    "Is a Local Reinsurer used?",
    "Local Reinsurer Name",
    "Local Reinsurer Address",
    "Local Reinsurer Commission Percent",
    "Local Reinsurer Retention Percent"
  ];
  for (const label of metadataLabels) {
    result[label] = findMetadataValue(data, label);
  }

  // === Contact section extraction ===
  const contactSections = [
    "Primary Contact",
    "Underwriting Contact",
    "Premium Collection Contact",
    "Claims Contact"
  ];
  for (const section of contactSections) {
    result[section] = extractContactSection(data, section);
  }

  console.log(result);
  return result;
}

// === Contact structure ===
type Contact = {
  name: string;
  company: string;
  email: string;
  phone: string;
};

// === Find a single metadata value by label ===
function findMetadataValue(data: (string | number | boolean)[][], label: string): string {
  for (let i = 0; i < data.length; i++) {
    const row = data[i];
    const cell = (row[0] ?? '').toString().toLowerCase();
    if (cell.includes(label.toLowerCase())) {
      for (let j = 1; j < row.length; j++) {
        const val = row[j];
        if (val !== null && val.toString().trim() !== '') {
          return val.toString().trim();
        }
      }
    }
  }
  return '';
}

// === Extract contact section by label, supporting multiple rows ===
function extractContactSection(data: (string | number | boolean)[][], label: string): Contact[] {
  const contacts: Contact[] = [];
  let startRow = -1;

  // Step 1: Locate label
  for (let i = 0; i < data.length; i++) {
    const cell = (data[i][0] ?? '').toString().toLowerCase();
    if (cell.includes(label.toLowerCase())) {
      startRow = i + 1;
      break;
    }
  }
  if (startRow === -1) return [];

  // Step 2: Traverse rows after label until next section or blank
  for (let i = startRow; i < data.length; i++) {
    const row = data[i];
    const firstCell = (row[0] ?? '').toString().toLowerCase();

    // Stop if it's a new section or empty
    if (
      firstCell.includes("contact") &&
      !firstCell.includes(label.toLowerCase())
    ) break;
    if (row.every(cell => cell === null || cell.toString().trim() === '')) break;

    // Step 3: Extract contact fields dynamically
    const name = (row[0] ?? '').toString().trim();
    const company = (row[1] ?? '').toString().trim();

    // Email: Look through columns 2â€“6
    let email = '';
    for (let j = 2; j < row.length; j++) {
      const val = row[j]?.toString().trim();
      if (val && val.includes('@')) {
        email = val;
        break;
      }
    }

    // Phone: Look through remaining columns
    let phone = '';
    for (let j = 3; j < row.length; j++) {
      const val = row[j]?.toString().trim();
      if (val && (val.startsWith('+') || val.match(/^\d{5,}$/))) {
        phone = val;
        break;
      }
    }

    // Only include if at least one field is non-empty
    if (name || company || email || phone) {
      contacts.push({ name, company, email, phone });
    }
  }

  return contacts;
}

function main(workbook: ExcelScript.Workbook) {
  const generalSheet = workbook.getWorksheet("General Info");
  const financialSheet = workbook.getWorksheet("Financial");
  const productCapabilities = workbook.getWorksheet("Product Capabilities");

  if (!generalSheet || !financialSheet || !productCapabilities) {
    console.log("One or more required sheets are missing!");
    return;
  }

  let finalSheet = workbook.getWorksheet("Final Data");
  if (!finalSheet) {
    finalSheet = workbook.addWorksheet("Final Data");
  } else {
    finalSheet.getUsedRange()?.clear();
  }

  const generalHeadersMap = [
    { ExcelLabel: "Local Broker Required?", FinalSheetDataHeader: "Broker Requirement" },
    { ExcelLabel: "Insurer:", FinalSheetDataHeader: "Local Insurer Name" },
    { ExcelLabel: "Local Reinsurer Address", FinalSheetDataHeader: "Local Reinsurer Address" },
    { ExcelLabel: "Local Reinsurer Commission Percent", FinalSheetDataHeader: "Local Reinsurer Commission" },
    { ExcelLabel: "Country", FinalSheetDataHeader: "Local Reinsurer Country" },
    { ExcelLabel: "Local Reinsurer Name", FinalSheetDataHeader: "Local Reinsurer Name" },
    { ExcelLabel: "Local Reinsurer Notes", FinalSheetDataHeader: "Local Reinsurer Notes" },
    { ExcelLabel: "Local Reinsurer Retention Percent", FinalSheetDataHeader: "Local Reinsurer Retention %" },
    { ExcelLabel: "Is a Local Reinsurer used? (If No, disregard the below questions)", FinalSheetDataHeader: "Local Reinsurer?" },
    { ExcelLabel: "Local Insurer Abbreviated Name:", FinalSheetDataHeader: "Partner Abbreviated Name" },
    { ExcelLabel: "Address:", FinalSheetDataHeader: "Partner Address" },
    { ExcelLabel: "Claims Contact:", FinalSheetDataHeader: "Partner Claim Contact Email", propertyName: "email" },
    { ExcelLabel: "Claims Contact:", FinalSheetDataHeader: "Partner Claim Contact Name", propertyName: "name" },
    { ExcelLabel: "Insurer:", FinalSheetDataHeader: "Partner Name" },
    { ExcelLabel: "Primary Contact:", FinalSheetDataHeader: "Partner Primary Contact Email", propertyName: "email" },
    { ExcelLabel: "Primary Contact:", FinalSheetDataHeader: "Partner Primary Contact Name", propertyName: "name" },
    { ExcelLabel: "Primary Contact:", FinalSheetDataHeader: "Partner Primary Contact Phone", propertyName: "phone" },
    { ExcelLabel: "Primary Contact:", FinalSheetDataHeader: "Partner Primary Contact Title", propertyName: "title" }
  ];

  const allHeaders = [...new Set([...generalHeadersMap, ...financialHeadersMap, ...productCapabilitiesHeadersMap].map(obj => obj.FinalSheetDataHeader))];
  const lastColumnLetter = String.fromCharCode(64 + allHeaders.length);

  finalSheet.getRange(`A1:${lastColumnLetter}1`).setValues([allHeaders]);

  const generalData = generalSheet.getUsedRange()?.getValues() || [];
  const financialData = financialSheet.getUsedRange()?.getValues() || [];
  const productCapabilitiesData = productCapabilities.getUsedRange()?.getValues() || [];

  // Extract general sheet data with contact parsing support
  const generalExtractedData = generalHeadersMap.map(obj => {
    if (obj.propertyName && (obj.ExcelLabel.includes("Primary Contact") || obj.ExcelLabel.includes("Claims Contact"))) {
      return extractContactProperty(generalData, obj.ExcelLabel, obj.propertyName);
    } else {
      return findMetadataValue(generalData, obj.ExcelLabel.trim());
    }
  });

  const financialExtractedData = financialHeadersMap.map(obj => findMetadataValue(financialData, obj.ExcelLabel.trim(), true));
  const productCapabilitiesExtractedData = productCapabilitiesHeadersMap.map(obj => findMetadataValue(productCapabilitiesData, obj.ExcelLabel.trim()));

  const rowData = [...generalExtractedData, ...financialExtractedData, ...productCapabilitiesExtractedData];
  finalSheet.getRange(`A2:${lastColumnLetter}2`).setValues([rowData]);

  console.log("Final Data sheet updated dynamically!");
}

// Generic metadata finder
function findMetadataValue(data: (string | number | boolean)[][], label: string): string {
  const normalizedLabel = label.toLowerCase().replace(/\s+/g, " ").trim();
  for (const row of data) {
    const cell = (row[0] ?? '').toString().toLowerCase().replace(/\s+/g, " ").trim();
    if (cell.includes(normalizedLabel) || normalizedLabel.includes(cell)) {
      for (let j = 1; j < row.length; j++) {
        const val = row[j];
        if (val !== null && val.toString().trim() !== '') {
          return val.toString().trim();
        }
      }
    }
  }
  return '';
}

// Contact parser for "Primary Contact:" or "Claims Contact:"
function extractContactProperty(data: (string | number | boolean)[][], label: string, property: string): string {
  let contacts: string[] = [];

  for (const row of data) {
    const cellLabel = (row[0] ?? '').toString().toLowerCase().trim();
    if (cellLabel.includes(label.toLowerCase())) {
      const cellValue = row.slice(1).join(" ").trim();
      const lines = cellValue.split(/\n|;/).map(line => line.trim()).filter(Boolean);
      for (const line of lines) {
        const [name, title, email, phone] = line.split(/\s{2,}|\t| {2,}/); // assuming fields are space/tab separated
        const contact = { name, title, email, phone };
        if (contact[property]) {
          contacts.push(contact[property]);
        }
      }
    }
  }

  return contacts.join(", ");
}

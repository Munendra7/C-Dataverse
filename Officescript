function main(workbook: ExcelScript.Workbook) {
  const sheet = workbook.getActiveWorksheet();
  const data: (string | number | boolean)[][] = sheet.getUsedRange().getValues();

  const result: Record<string, string | Contact[]> = {};

  // === Metadata fields to extract ===
  const metadataFields: string[] = [
    "Country",
    "Insurer",
    "Local Insurer Abbreviated Name",
    "Address",
    "Local Broker Required?",
    "Minimum Brokerage Percent",
    "Maximum Brokerage Percent",
    "Is a Local Reinsurer used?",
    "Local Reinsurer Name",
    "Local Reinsurer Address",
    "Local Reinsurer Commission Percent",
    "Local Reinsurer Retention Percent"
  ];

  for (const label of metadataFields) {
    result[label] = extractSingleValue(data, label);
  }

  // === Contact blocks to extract ===
  const contactSections: string[] = [
    "Primary Contact",
    "Underwriting Contact",
    "Premium Collection Contact",
    "Claims Contact"
  ];

  for (const section of contactSections) {
    result[section] = extractContactRows(data, section);
  }

  console.log(result);
  return result;
}

// === Contact data type ===
type Contact = {
  name: string;
  company: string;
  email: string;
  phone: string;
};

// === Extract a single cell value from a label ===
function extractSingleValue(data: (string | number | boolean)[][], label: string): string {
  for (let i = 0; i < data.length; i++) {
    const cellValue = (data[i][0] ?? '').toString().toLowerCase();
    if (cellValue.includes(label.toLowerCase())) {
      for (let j = 1; j < data[i].length; j++) {
        const value = data[i][j];
        if (value !== null && value.toString().trim() !== '') {
          return value.toString().trim();
        }
      }
    }
  }
  return '';
}

// === Extract contact block (multiple rows) dynamically ===
function extractContactRows(data: (string | number | boolean)[][], sectionLabel: string): Contact[] {
  const contacts: Contact[] = [];
  let startRow = -1;

  // Step 1: Find the section label
  for (let i = 0; i < data.length; i++) {
    const cell = (data[i][0] ?? '').toString().toLowerCase();
    if (cell.includes(sectionLabel.toLowerCase())) {
      startRow = i + 1;
      break;
    }
  }

  if (startRow === -1) return [];

  // Step 2: Parse rows until an empty row or new section
  for (let i = startRow; i < data.length; i++) {
    const row = data[i];
    const firstCell = (row[0] ?? '').toString().trim().toLowerCase();

    // Stop if row is empty or starts a new section
    if (
      firstCell.includes('contact') &&
      !firstCell.includes(sectionLabel.toLowerCase())
    ) break;
    if (row.every(cell => cell === null || cell.toString().trim() === '')) break;

    // Dynamically extract data from row
    const name = (row[0] ?? '').toString().trim();
    const company = (row[1] ?? '').toString().trim();

    const emailParts: string[] = [];
    if (row[2]) emailParts.push(row[2].toString().trim());
    if (row[3]) emailParts.push(row[3].toString().trim());
    const email = emailParts.join('').includes('@') ? emailParts.join('') : '';

    let phone = '';
    for (let j = 4; j < row.length; j++) {
      const cellVal = row[j]?.toString().trim();
      if (cellVal && (cellVal.startsWith('+') || cellVal.match(/^\d+$/))) {
        phone = cellVal;
        break;
      }
    }

    if (name || company || email || phone) {
      contacts.push({ name, company, email, phone });
    }
  }

  return contacts;
}

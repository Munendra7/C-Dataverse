import * as React from 'react';
import { IGridComponentProps } from './IGridComponentProps';
import { ResuableGridComponent } from './component/ResuableGridComponent';
import { GridColumn } from './component/ConstantFile/columnConstant';
import { SPOperations } from './component/Methods/SPOperations';
import { EmptyGridComponent } from './component/EmptyGridComponent';
import ModalComponent from './component/ModalComponent';
import { columnName } from './component/ConstantFile/versionHistoryConstant';

export default class GridComponent extends React.Component<IGridComponentProps, any> {
  public _SPOperationsObj: SPOperations;

  constructor(props: any) {
    super(props);
    this._SPOperationsObj = new SPOperations(this.props.context);
    this.state = {
      dataSource: [],
      domChange: false,
      showModal: false,
      versionHistoryHTML: '',
      loader: false,
      searchText: '',
      filteredData: []
    };
  }

  componentDidMount = async (): Promise<void> => {
    this.setState({ loader: true });

    const [uwRequests, uwRequestsLibrary] = await Promise.all([
      this._SPOperationsObj._GetListItems("UW Requests", "*,RequestorUW/EMail,RequestorUW/Title,AssignedTo/EMail,AssignedTo/Title", "RequestorUW,AssignedTo"),
      this._SPOperationsObj._GetListItems("UW Requests Library", "requestId/Id,FileRef,FileLeafRef,ID,File/Name,Modified,Editor/Title", "File,Editor,requestId")
    ]);

    const combinedData = uwRequests.map(request => {
      const files = uwRequestsLibrary.filter(library => library.requestId.Id === request.Id).map(record => ({
        FileLeafRef: record.FileLeafRef,
        File: record.File,
        FileRef: record.FileRef,
        Modified: record.Modified,
        Editor: record.Editor
      }));

      return { ...request, Files: files };
    });

    this.setState({
      dataSource: combinedData,
      filteredData: combinedData,
      domChange: true,
      loader: false
    });
  }

  formatDate = (date: any) => {
    let localDateObj = new Date(date);
    let dateObj = new Date(localDateObj.getUTCFullYear(), localDateObj.getUTCMonth(), localDateObj.getUTCDate());
    return dateObj.toLocaleDateString();
  }

  ModalCancelbtn = () => {
    this.setState({ showModal: false, versionHistoryHTML: "" });
  }

  GetVersionHistoryModal = async (itemID: any) => {
    this.setState({ loader: true });
    let data = await this._SPOperationsObj._GetVersionHistory(itemID, "UW Requests", columnName);
    this.setState({
      showModal: true,
      versionHistoryHTML: data,
      loader: false
    });
  }

  _FieldTypeValue = (gridData: any, row: any) => {
    // (same logic as before)
  }

  _FieldTypeValueFilterAndSorting = (gridData: any, row: any) => {
    // (same logic as before)
  }

  onSearch = () => {
    const { searchText, dataSource } = this.state;
    const lowerSearch = searchText.toLowerCase();

    const filtered = dataSource.filter((item: any) => {
      return GridColumn.some((col: any) => {
        const value = this._FieldTypeValueFilterAndSorting(item, col);
        return value?.toString().toLowerCase().includes(lowerSearch);
      });
    });

    this.setState({ filteredData: filtered });
  }

  handleSearchInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    this.setState({ searchText: e.target.value });
  }

  render() {
    return (
      <div className="p-4">
        <div className="mb-3 flex gap-2">
          <input
            type="text"
            placeholder="Search..."
            value={this.state.searchText}
            onChange={this.handleSearchInputChange}
            className="form-control w-1/4"
          />
          <button className="btn btn-primary" onClick={this.onSearch}>Search</button>
        </div>

        {this.state.filteredData.length > 0 ?
          <ResuableGridComponent
            dataSource={[...this.state.filteredData]}
            columnConstant={GridColumn}
            _fieldTypeFunc={this._FieldTypeValue}
            _fieldTypeFuncFilterAndSorting={this._FieldTypeValueFilterAndSorting}
            itemCount={9}
          />
          : <EmptyGridComponent columnConstant={GridColumn} />
        }

        {this.state.loader && <div id="cover-spin"></div>}
        {this.state.showModal && <ModalComponent HTMLVersionHistory={this.state.versionHistoryHTML} CancelBtn={this.ModalCancelbtn} />}
      </div>
    );
  }
}
